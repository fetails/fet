/**
 * Made by viker - 2020.
 * @param {github} -> https://fetails.github.io/fet/
 */
class AchiConfig{constructor(){this.message="achi v0.2",this.clearCol=[0,0,0,1],this.showLines=!1,this.animate=!1,this.alphaModifier=.5,this.zoom=25}}class AchiVertex{constructor(e,t){this.vertex=e,this.indices=t}}class AchiColor{constructor(e,t,i,r){this.r=e/255,this.g=t/255,this.b=i/255,this.a=r/255}}class AchiShaderExperimental{constructor(e){let t=ogl;this.vdata=e;let i=t.createShader(ogl.VERTEX_SHADER);ogl.shaderSource(i,e),ogl.compileShader(i),ogl.getShaderParameter(i,ogl.COMPILE_STATUS)||console.log("error.")}}class AchiShader{constructor(e,t){this.gl=ogl;let i=this.gl,r=i.createShader(i.VERTEX_SHADER);i.shaderSource(r,e),i.compileShader(r);let s=i.createShader(i.FRAGMENT_SHADER);i.shaderSource(s,t),i.compileShader(s);let o=i.createProgram();i.attachShader(o,r),i.attachShader(o,s),i.linkProgram(o),i.validateProgram(o),i.deleteShader(r),i.deleteShader(s),this.program=o}uniform_float(e,t){let i=this.gl;i.uniform1f(i.getUniformLocation(this.program,e),t)}uniform_matrix4f(e,t){let i=this.gl;i.uniformMatrix4fv(i.getUniformLocation(this.program,e),i.FALSE,t)}bind(){this.gl.useProgram(this.program)}unbind(){this.gl.useProgram(null)}}class Achi{constructor(e){this.gl=e,this.options=new AchiConfig}gui(){let e=new dat.GUI;e.add(this.options,"message"),e.add(this.options,"showLines"),e.addColor(this.options,"clearCol"),e.add(this.options,"zoom")}clear(){stats.begin(),stats.end();let e=this.gl;e.clearColor(this.options.clearCol[0]/255,this.options.clearCol[1]/255,this.options.clearCol[2]/255,this.options.clearCol[3]/255),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),e.viewport(0,0,canvas.width,canvas.height),e.enable(e.DEPTH_TEST)}add(e){this.gl;this.indices=e.indices,this.buffer=e.vertex}create(){let e=this.gl;this.vbo=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this.vbo),e.bufferData(e.ARRAY_BUFFER,new Float32Array(this.buffer),e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),this.ibo=e.createBuffer(),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.ibo),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(this.indices),e.STATIC_DRAW),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)}quad(e,t,i,r){this.add(new AchiVertex([e,t+r,0,e+i,t+r,0,e+i,t,0,e,t,0],[0,1,2,3,0,2]))}cube3D(){this.add(new AchiVertex([-1,1,-1,-1,1,1,1,1,1,1,1,-1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,1,1,-1,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,1,1,-1,1,1,-1,-1],[0,1,2,0,2,3,5,4,6,6,4,7,8,9,10,8,10,11,13,12,14,15,14,12,16,17,18,16,18,19,21,20,22,22,20,23]))}begin(){let e=this.gl;e.bindBuffer(e.ARRAY_BUFFER,this.vbo),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.ibo),e.vertexAttribPointer(0,3,e.FLOAT,e.FALSE,0,0),e.enableVertexAttribArray(0)}end(){let e=this.gl;e.disableVertexAttribArray(0),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),e.bindBuffer(e.ARRAY_BUFFER,null)}render(e=this.indices.length){let t=this.gl;this.options.showLines?t.drawElements(t.LINE_LOOP,e,t.UNSIGNED_SHORT,0):t.drawElements(t.TRIANGLES,e,t.UNSIGNED_SHORT,0)}del(){let e=this.gl;e.deleteBuffer(this.vbo),e.deleteBuffer(this.ibo)}}